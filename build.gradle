import org.gradle.plugins.signing.Sign

allprojects {
    group 'dev.rudiments'
    version '0.2'

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'scala'
    apply plugin: 'signing'

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.allTasks.any { it instanceof Sign }) {
            allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
            allprojects { ext."signing.secretKeyRingFile" = rootProject.projectDir.toString() + "/" + System.getenv('GPG_KEY_LOCATION') }
            allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
        }
        // Do not sign archives by default (a local build without gpg keyring should succeed)
        if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
            tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
                task.enabled = false
            }
        }
    }

    signing {
        sign configurations.archives
    }

    build.dependsOn.remove(signArchives)

    task scaladocJar(type: Jar, dependsOn: scaladoc) {
        classifier = 'javadoc'
        from "${project.buildDir}/docs/scaladoc"
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives scaladocJar
        archives sourceJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: System.getenv('SONATYPE_REPO_URL')) {
                     authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
                }
                pom.project {
                    description "${parent.project.description}"
                    groupId "${parent.project.group}"
                    name "${project.name}"
                    packaging 'jar'
                    url "https://github.com/rudiments-dev/hardcore"
                    version "${parent.project.version}"
                    developers {
                        developer {
                            id 'gennady-lebedev'
                            name 'Gennady Lebedev'
                        }
                    }
                    licenses {
                        license {
                            name 'Apache License v2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    scm {
                        url "https://github.com/rudiments-dev/hardcore"
                        connection "git@github.com:rudiments-dev/hardcore.git"
                    }
                }
            }
        }
    }
}

def scalaModules() {
    subprojects.findAll { new File(it.projectDir, 'src/main/scala').directory }
}

configure(scalaModules()) {
    apply plugin: 'java'
    apply plugin: 'scala'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    test {
        reports {
            html.enabled = true
            junitXml.enabled = true
        }
        maxHeapSize = "2048m"
        testLogging {
            events "skipped", "failed"
            exceptionFormat "short"
        }
    }

    dependencies {
        compile 'org.scala-lang:scala-library:2.12.8'
        compile 'com.typesafe.akka:akka-actor_2.12:2.5.19'
        compile 'com.typesafe.akka:akka-slf4j_2.12:2.5.19'
        compile 'com.typesafe.akka:akka-stream_2.12:2.5.19'
        compile 'com.typesafe.akka:akka-http_2.12:10.1.7'


        compile 'ch.megard:akka-http-cors_2.12:0.3.3'
        compile 'io.circe:circe-core_2.12:0.11.0'
        compile 'io.circe:circe-generic_2.12:0.11.0'
        compile 'io.circe:circe-generic-extras_2.12:0.11.0'
        compile 'de.heikoseeberger:akka-http-circe_2.12:1.23.0'

        compile 'org.scalikejdbc:scalikejdbc_2.12:3.3.5'

        compile 'org.typelevel:cats_2.12:0.9.0'
        compile 'org.typelevel:cats-effect_2.12:1.1.0'

        compile 'com.beachape:enumeratum_2.12:1.5.13'

        compile 'com.typesafe.scala-logging:scala-logging_2.12:3.9.2'
        compile 'org.slf4j:slf4j-api:1.7.25'

        testCompile 'org.scalatest:scalatest_2.12:3.0.5'
        testCompile 'com.typesafe.akka:akka-testkit_2.12:2.5.19'
        testCompile 'com.typesafe.akka:akka-http-testkit_2.12:10.1.7'

        testCompile 'junit:junit:4.12'
        testCompile 'ch.qos.logback:logback-classic:1.2.3'
    }
}