openapi: "3.0.0"
info:
  version: "0.5"
  title: Domain registry API
servers:
  - url: http://localhost:8765/api
paths:
  /domain:
    get:
      summary: Get all Things in Domain
      operationId: FindAll[Type]
      responses:
        200:
          description: List of All Things
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Type'
    post:
      summary: Create a Type
      operationId: Create[Type]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
      responses:
        201:
          description: Type crated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

  /domain/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name of the Thing to retrieve
        schema:
          type: string

    get:
      summary: Retrieve the Type
      operationId: Find[Type]
      responses:
        200:
          description: Get the Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

    put:
      summary: Update the Type
      operationId: Update[Type]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
      responses:
        200:
          description: Type updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

    delete:
      summary: Delete the Type
      operationId: Delete[Type]
      responses:
        200:
          description: Thing deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

components:
  schemas:

    Thing:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Type:
      type: object
      required:
        - name
        - thing
        - is
      properties:
        name:
          type: string
        thing:
          $ref: '#/components/schemas/AnyThing'
        is:
          type: array
          items:
            type: string


    AnyThing:
      oneOf:
        - $ref: '#/components/schemas/Abstract'
        - $ref: '#/components/schemas/Spec'
        - $ref: '#/components/schemas/The'
      discriminator:
        propertyName: type
        mapping:
          Abstract: '#/components/schemas/Abstract'
          Spec: '#/components/schemas/Spec'
          The: '#/components/schemas/The'

    Abstract:
      allOf:
        - $ref: '#/components/schemas/Thing'
        - type: object
          required:
            - fields
          properties:
            fields:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ValueSpec'

    Spec:
      allOf:
        - $ref: '#/components/schemas/Thing'
        - type: object
          required:
            - fullName
            - fields
          properties:
            fullName:
              type: strings
            fields:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ValueSpec'

    The:
      allOf:
        - $ref: '#/components/schemas/Thing'
#        - type: object
#          properties:
#            value:
#              $ref: '#/components/schemas/Instance'

    ValueSpec:
      type: object
      required:
        - type
        - isRequired
#        - default
      properties:
        type:
          $ref: '#/components/schemas/AnyThing'
        isRequired:
          type: boolean
          default: true
#        default:
#          $ref: '#/components/schemas/Instance'

#    Instance:
#      type: object
#      required:
#        - fields
#        - type
#      properties:
#        spec:
#          $ref: '#/components/schemas/Spec'
#        values:
#          type: array
#          items:
#            oneOf:
#              - type: string
#              - type: number
#              - type: boolean
#              - type: array
#              - type: object
